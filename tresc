Treści wszystkich zadań.

Zadanie 1.1
Napisać program, który korzystając z rozwinięcia liczby pi w szereg wyznaczy i wydrukuje jej wartość z dokładnością do maksymalnej liczby miejsc po przecinku, którą można uzyskać dla typów double i long double. Definicje takich szeregów oraz początkowe cyfry rozwinięcia liczby pi można znaleźć np. w Wikipedii. Spośród wielu możliwych szeregów należy wybrać taki, który jest szybko zbieżny.

Zadanie 1.2
Napisz program, który wczytuje dwie liczby całkowite N i M, a następnie oblicza i drukuje wartość ilorazu N/M w postaci okresowego rozwinięcia dziesiętnego, np. `4/3` należy wydrukować jako `1,(3)`, a `2/7` jako `0,(285714)`. Ułamki, które mają skończone rozwinięcie dziesiętne należy wydrukować dokładnie (bez nawiasów zawierających 0), np. `3/8` należy wypisać jako `0,375`.

Zadanie 1.3
Napisać program, który na standardowym wyjściu wypisze dziesięć ostatnich wierszy z tekstu podanego na standardowym wejściu. Jeśli na wejściu tekst ma mniej niż 10 wierszy, to należy go skopiować w całości. Można założyć, że łączna długosć 10 kolejnych wierszy w tekście nie przekracza stałej `MAX10` równej 10000. Jeśli tekst wejściowy nie spełnia tego założenia, to należy zasygnalizować błąd i przerwać przetwarzanie tekstu. Nie wolno ograniczać długości tekstu wyjściowego.

Zadanie 2.1
Napisać program, który zamienia w tekście ze standardowego wejścia polskie litery w standardzie ISO-8859-2 na WINDOWS-1250. Przetworzony tekst należy wypisać na standardowym wyjściu.

Zadanie 2.2
Napisać program, który przepisze tekst ze standardowego wejścia na standardowe wyjście umieszczając na wyjściu słowa rozdzielone pojedyńczą spacją w zadanym przedziale kolumn m...n, gdzie m < n < 200. Oznacza to, że każdy wiersz powinien się zaczynać m-1 znakami spacji, po których występuje ciąg kolejnych słów (co najmniej jedno) oddzielonych pojedyńczą spacją, a ostatni znak ostatniego słowa w wierszy znajduje się na pozycji <= n, gdzie pozycje (kolumny) w wierszu numerujemy od 1. Wartości m i n powinny być argumentami wywołania programu. Jeśli w tekście wejściowym pojawi się słowo dłuższe niż n-m+1 to można przerwać działanie programu z czytelnym komunikatem. Słowem nazywamy tu niepusty ciąg znaków nie zawierający tzw. białych znaków, czyli spacji, tabulacji czy znaku nowej linii.

Zadanie 2.3
Odcisk palca danego tekstu to wyliczona na podstawie wszystkich znaków tekstu pewna liczba. W najprostszym wariancie może to być suma kodów znaków. Na początku programu obliczany jest odcisk palca ze wzorca. W czasie przetwarzania tekstu liczone są odciski palca kolejnych fragmentów tekstu o długości wzorca (odcisk palca dla następnego fragmentu tekstu powinien być wyliczany za pomocą stałej liczby prostych operacji z dostępnych danych, np. w najprostszym wariancie przez dodanie do odcisku palca poprzedniego fragmentu tekstu kodu kolejnego znaku i odjęcie kodu znaku rozpoczynającego poprzedni fragment). Dokładne porównanie fragmentu ze wzorcem wykonujemy tylko wtedy, gdy zgadzają się ich odciski palców. Na końcu wypisać dodatkowo, ile razy zgodziły się odciski palców oraz ile było rzeczywistych trafień. Opis innej funkcji odcisku palca można znaleźć w: http://pl.wikipedia.org/wiki/Algorytm_Karpa-Rabina

Zadanie 3.1
Napisać funkcję, która dla zadanej jako parametr liczby dodatniej n wyznaczy najbliższą, większą od niej liczbę pierwszą. Następnie napisać program, który wczytuje ze standardowego wejścia parę liczb n i k oraz - używając zdefiniowanej funkcji - wypisuje na standardowym wyjściu k kolejnych liczb pierwszych większych od n. Dla n użyć typu long long int, a dla k typu int. Zadbać o efektywność sprawdzania, czy liczba jest pierwsza.

Zadanie 3.2
Napisać program, który sprawdza, czy w tekście zadanym na standardowym wejściu poprawnie zostały rozstawione nawiasy '(', ')', '[' i ']'. Na wyjściu należy wypisać pozycje (numery wierszy i kolumn liczonych od 1) niesparowanych nawiasów. Użyć funkcji rekurencyjnej do szukania pasującego nawiasu zamykającego.

Zadanie 3.3
Wielomian jednej zmiennej o współczynnikach rzeczywistych może być reprezentowany poprzez stopień i tablicę współczynników typu double. Napisać program, który zawiera funkcje dodawania, odejmowania i mnożenia wielomianów, dzielenia wielomianów przez jednomian oraz funkcję main, która wykonuje zadane operacje na podanych wielomianach. Przydatne będą też funkcje czytania i wypisania wielomianu. Każdy wiersz danych standardowego wejścia zawiera znak operacji ('+', '-', '*', '/'), a następnie oddzielone spacjami dwa wielomiany - argumenty operacji (w przypadku dzielenia drugim argumentem jest jednomian). Wielomian zadany jest jako ciąg liczb n, a_0, a_1, ..., a_n, gdzie 0 <= n <= 1000 oraz a_n != 0, jeśli n > 0. Jednomian a*x^n jest podany jako dwie liczby: n i a. Wynikowe wielomiany powinny być wypisane w takiej samej postaci w oddzielnych wierszach; dla dzielenia reszta nie jest wypisywana. Liczby należy wypisywać z dwiema cyframi po przecinku.

Zadanie 4.1
Zbiór liczb całkowitych może być zapisany w tablicy o elementach typu int, gdzie elementy zbioru5 są posortowane rosnąco, a na początku tablicy zapisana jest liczba jego elementów. Zdefiniować za pomocą typedef nowy typ reprezentujący takie zbiory. Następnie zdefiniować dla tego typu operacje: sumy zbiorów, przekroju zbiorów, czyszczenia zbioru oraz dodawania do zbioru i usuwania ze zbioru pojedyńczego elementu. Zadbać o to, aby liczba operacji, którą wykonują te funkcje była proporcjonalna do wielkości tych zbiorów. Sformułować z nich moduł i stworzyć plik nagłówkowy. Następnie napisać drugi moduł zawierający program testujący poprawność zdefiniowanych funkcji.

Zadanie 4.2
Zdefiniować za pomocą typedef nowy typ reprezentujący liczbę wymierną jako long long int, w której licznik i mianownik są zapisane na odpowiednich połowach ciągu bitów. Licznik i mianownik zapisywane w tym typie nie powinny mieć nietrywialnego wspólnego dzielnika, a mianownik powinien być nieujemny. Dla nowego typu zdefiniować funkcje wykonujące cztery podstawowe działania oraz operacje czytania i wypisywania liczby wymmiernej. Wprowadzone i drukowane liczby wymierne powinny mieć postać n/m. Sformować z nich moduł i stworzyć plik nagłówkowy. Następnie napisać drugi moduł zawierający program testujący poprawność zdefiniowanych funkcji.

Zadanie 4.3
Zdefiniować za pomocą typedef nowy typ reprezentujący w tablicy wielomian jednej zmiennej o współczynnikach wymiernych. Użyć reprezentacji liczb wymiernych z poprzedniego zadania. Dla takich wielomianów zdefiniować funkcje wykonujące ich dodawanie, odejmowanie, mnożenie i dzielenie oraz operacje czytania, pisania i wyliczania wartości wielomianu w punkcje wymiernym. Sformułować z nich moduł i stworzyć plik nagłówkowy. Następnie napisać program testujący poprawność zdefiniowanych funkcji.

Zadanie 5.1
Napisać program, który dla zadanej jako parametr liczby naturalnej n wypisze w kolejnych wierszach wszystkie permutacje liczb 1,2,...,n. Użyć rekurencyjnej funkcji do generowania permutacji.


Zadanie 5.2
Kwadratem magicznym rozmiaru N nazywamy tablicę kwadratową rozmiaru N x N, w której pola wpisane zostały liczby od 1 do N² w taki sposób, że każda z nich występuje dokładnie jeden raz oraz sumy wierszy, sumy kolumn oraz sumy głównych przekątnych są takie same. Napisać program, który dla zadanego N wypisuje na standardowym wyjściu kolejne, różne kwadraty magiczne rozmiaru N i pyta, czy kontynuować wypisywanie. Rozmiar powinien być zadawany jako parametr wywołania programu.

Zadanie 5.3
Napisać program policz, który dla zadanego na wejściu wyrażenia zbudowanego z liczb całkowitych ze znakiem oraz operatorów +, -, * i / (bez nawiasów) obliczy wartość tego wyrażenia z uwzględnieniem priorytetów i łączności tych operatorów (takich jak w języku C). Użyć oddzielnej funkcji do obliczenia wartości podwyrażenia, w którym występują tylko operatory mnożenia i dzielenia.

Zadanie 6.1
Kolejka to struktura, w której nowe elementy dopisywane są na końcu, a pobierane z niej elementy pochodzą z początku kolejki (podobnie jak w kolejce sklepowej). Do implementacji kolejki w tablicy potrzebne są dwa indeksy (lub wskaźniki) - jeden wskazujący początek kolejki, a drugi - jej koniec. Tablica powinna być wykorzystywana cyklicznie, jeśli na jej początku zwolni się miejsce. Zdefiniować strukturę reprezentującą kolejkę liczb typu double i funkcje: (1) opróżniania kolejki, (2) dopisywania liczby do kolejki, (3) pobierania liczby z kolejki, (4) sprawdzania, czy kolejka jest pusta. Utworzyć z nich moduł z odpowiednim plikiem nagłówkowym. Program główny powinien umożliwić testowanie operacji na kolejce.

Zadanie 6.2
Numer rachunku bankowego w standardzie IBAN (ang. International Bank Account Number) składa się z dwuliterowego kodu kraju (dla Polski - PL), po którym następują dwie cyfry sprawdzające (suma kontrolna), i do trzydziestu znaków alfanumerycznych określających numer rachunku, określanych jako BBAN (Basic Bank Account Number). Decyzja o długości tego bloku należy do poszczególnych krajów z tym, że dany kraj musi posiadać jedną, określoną długość (w Polsce wynosi ona 24). W BBAN musi się zawierać unikatowy kod identyfikujący bank, o określonej długości i określonym miejscu, w którym się on rozpoczyna. Jego pozycja i długość również zależy od danego kraju (w Polsce 8 pierwszych znaków BBAN-u). Napisać program, który wczytuje ze standardowego wejścia pewną liczbę numerów kont bankowych w standardzie IBAN (nie więcej niż MAX=10000, każdy w oddzielnym wierszu), sortuje je leksykograficznie z pominięciem cyfr kontrolnych wybranym przez siebie algorytmem i wypisuje w kolejności nierosnącej na standardowym wyjściu. Aby przyspieszyć sortowanie przestawiać należy wskaźniki na numery bankowe, a nie same numery.

Zadanie 6.3
Zdefiniować moduł służący do testowania sprawności różnych algorytmów sortowania liczb całkowitych. Moduł powinien mieć generator pseudolosowych ciągów o zadanej w parametrze długości (użyć funkcji rand z biblioteki stdlib do otrzymywania pseudolosowej wartości całkowitej), funkcję sprawdzającą, czy wynik sortowania jest poprawny (tzn. czy wynik jest permutacją ciągu wejściowego i czy jest uporządkowany niemalejąco) oraz funkcję obliczającą minimalny, średni oraz maksymalny czas wykonania zadanego algorytmu dla podanej liczby zestawów danych zadanej długości (użyć funkcji clock z time.h). Następnie, używając zdefiniowanego modułu, porównać sprawności wybranego, zaprogramowanego algorytmu sortowania oraz standardowej procedury qsort z biblioteki stdlib dla 100 zestawów wygenerowanych danych o rozmiarach 5000, 10000 i 50000. Wyznaczyć należy minimalny, średni i maksymalny czas działania każdego z algorytmów dla podanych rozmiarów danych. W pomiarach nie należy sprawdzać poprawności wyników.

Zadanie 7.1
Zdefiniować moduł służący do obsługi cyklicznych list jednostronnych zawierających wartości typu double. Moduł powinien udostępniać następujące operacje: (1) utwórz i zwróć wskaźnik na listę pustą, (2) dodaj wartość na początek wskazanej listy, (3) dodaj wartość na koniec wskazanej listy, (4) usuń i zwróć wartość z początku listy, (5) podaj wartość z początku listy, (6) sprawdź czy lista jest pusta, (7) połącz dwie wskazane listy, (8) skopiuj wskazaną listę, (9) podaj długość wskazanej listy oraz (10) wstaw wartość na właściwe miejsce w uporządkowanej liście wartości. Pamięć dla elementów listy powinna być przydzielana i zwalniana dynamicznie za pomocą standardowych procedur malloc i free z biblioteki stdlib. Lista reprezentowana jest przez wskaźnik na jej ostatni element (dla listy pustej ten wskaźnik ma wartość NULL).

Zadanie 7.2
Używając modułu z pierwszego zadania zaprogramować wersje algorytmów quicksort i sortowania przez wstawianie na listach zawierających wartości typu double. Parametrem obu procedur będzie tylko lista. W algorytmie quicksort jako element dzielący należy wziąć pierwszy element listy i rozdzielić dalszą część tej listy na dwie części: jedną zawierającą elementy <=, a drugą zawierającą elementy >. Te części należy posortować rekurencyjnie.

Zadanie 7.3
Kolejka dwustronna to struktura, w której elementy mogą być dopisywane i pobierane z obu stron. Do implementacji takiej kolejki jako struktury łączonej na stercie potrzebne są w każdym elemencie dwa wskaźniki - jeden na element poprzedni, a drugi na element następny. Głowa kolejki powinna zawierać dwa wskaźniki: na pierwszy i na ostatni element kolejki. Zdefiniować strukturę reprezentującą kolejkę liczb typu double i funkcje: (1) opróżniania kolejki, (2) dopisywania liczby do kolejki z przodu, (3) dopisywanie liczby do kolejki z tyłu, (4) pobierania liczby z kolejki z przodu, (5) pobierania liczby z kolejki z tyłu oraz (6) sprawdzania, czy kolejka jest pusta. Wskaźnik na strukturę reprezentującą kolejkę (głowę kolejki) powinien być pierwszym parametrem wszystkich tych operacji. Utworzyć z nich moduł z odpowiednim plikiem nagłówkowym. Program główny powinien umożliwić testowanie operacji na kolejce.

Zadanie 8.1
Wielopoziomową listę liczb całkowitych (w skrócie WLLC) definiujemy jako skończony (w tym także pusty) ciąg, którego elementami są liczby całkowite lub WLLC. Jeśli lista zawiera tylko liczby to nazywamy ją jednopoziomową. Przykłady: L1 = [3,1,5]; L2 = [2,[4,7],[]] oraz L3 = [[[3],[5,8],2],[1,5]]. Lista L1 jest jednopoziomowa. Zdefiniować moduł WLLC, w którym:
  a) Za pomocą typedef zdefiniowany jest typ reprezentujący WLLC.
  b) Zdefiniowana jest funkcja WLLC merge(WLLC l1, WLLC l2), która zwraca listę powstałą z dołączenia listy l2 na końcu listy l1.
  c) Zdefiniowana jest funkcja WLLC flat(WLLC li), która tworzy nową listę jednopoziomową zawierającą wszystkie liczby z listy li z zachowaniem ich kolejności.

Zadanie 8.2
Rozważamy wyrażenia arytmetyczne zbudowane z liczb rzeczywistych, operatorów dodawania (+), odejmowania (-), mnożenia (*) i dzielenia (/) oraz nawiasów. Operatory są lewostronnie łączne, a mnożenie i dzielenie mają wyższy priorytet niż dodawanie i odejmowanie. Takie wyrażenia mogą być reprezentowane przez drzewa wyrażenia, gdzie w liściach są liczby, a w węzłach pośrednich operatory. Napisać funkcję, która czyta wyrażenie zakończone znakiem średnika i tworzy dla niego drzewo wyrażenia. Drzewo powinno być zbudowane z węzłów dynamicznie tworzonych w stercie. Druga funkcja powinna wypisywać drzewo wyrażenia na standardowym wyjściu w postaci prefiksowej, czyli najpierw operator, a później jego argumenty. Na przykład wyrażenie ((2)+3)*(7-(5)); powinno zostać wypisane jako (* (+ 2 3) (- 7 5)). Program główny powinien czytać ciągi wyrażeń i wypisywać je w postaci prefiksowej.

Zadanie 9.1
Napisać program, który dla zadanych jako parametry wywołania programu nazwy pliku oraz liczby n podzieli wskazany plik na n prawie równych części (różniących się co najwyżej o jeden) i zapisze każdą część do odrębnego pliku wynikowego. Nazwy plików wynikowych powinny być tworzone z nazwy pliku źródłowego poprzez dodanie kolejnych liczb na końcu nazwy pliku. Jeśli plik źródłowy jest tekstowy, to podział powinien nastąpić względem liczby wierszy, jeśli jest binarny to względem liczby bajtów. Domyślnie traktujemy plik źródłowy jako binarny. Opcja -t jako pierwszy parametr wywołania programu powinna wskazywać, że plik trzeba potraktować jako tekstowy.

Zadanie 9.2
Napisać program, który pozwala porównywać zawartość dwóch wybranych plików tekstowych. Nazwy plików powinny być parametrami wywołania programu. Wynikiem porównania powinno być "Pliki są identyczne", "Pliki różnią się tylko białymi znakami" lub "Pliki różnią się treścią". W tym ostatnim przypadku program powinien wypisać zawartość pierwszych różnych wierszy i podać ich numer (liczony od 1).

Zadanie 10.1
Używając GTK+ stworzyć program, który w okienku zawiera trzy przyciski: ZA, PRZECIW i NIE MAM ZDANIA i który zbiera i wypisuje poniżej przycisków informacje o liczbie oddanych głosów oraz jaki procent głosów był za, a jaki przeciw. Nad przyciskami powinna być informacja w jakiej sprawie jest przeprowadzane głosowanie (może to być parametr wywołania programu lub ustalony przez autora programu tekst). Naciśnięcie odpowiedniego przycisku jest tutaj oddaniem głosu. Użyć struktury GtkLabel do umieszczania tekstu w okienku.

Zadanie 10.2
Używając GTK+ stworzyć interfejs okienkowy do programu wyznaczającego kolejne kwadraty magiczne zadanego rozmiaru (jako parametr wywołania programu). Użyć rozwiązania zadania 2 z listy 5 do generowania kwadratów magicznych.






















